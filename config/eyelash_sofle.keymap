#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <14 28 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC                 &kp N1        &kp N2        &kp N3     &kp N4  &kp N5       &mmv MOVE_UP     &kp N6     &kp N7  &kp N8         &kp N9     &kp N0      &kp GRAVE
&kp TAB                 &kp Q         &kp W         &kp E      &kp R   &kp T        &mmv MOVE_DOWN   &kp Y      &kp U   &kp I          &kp O      &kp P       &kp BACKSPACE
&mt CAPSLOCK RIGHT_ALT  &kp A         &kp S         &kp D      &kp F   &kp G        &mmv MOVE_LEFT   &kp H      &kp J   &kp K          &kp L      &kp SEMI    &kp APOS
&kp LSHFT               &kp Z         &kp X         &kp C      &kp V   &kp B        &mmv MOVE_RIGHT  &kp N      &kp M   &kp COMMA      &kp DOT    &kp FSLH    &kp RIGHT_SHIFT
&kp C_MUTE              &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &mo 1   &kp SPACE    &mkp MB1         &kp ENTER  &mo 2   &kp RIGHT_ALT  &kp RCTRL  &kp K_MENU
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE        &kp F1            &kp F2            &kp F3       &kp F4             &kp F5        &mmv MOVE_UP     &kp F6           &kp F7           &kp F8          &kp F9           &kp F10          &kp F11
&kp LA(LC(TAB))  &kp GRAVE         &kp LG(LC(LEFT))  &kp LG(TAB)  &kp LC(LG(RIGHT))  &kp LA(F4)    &mmv MOVE_DOWN   &kp PG_UP        &mkp MB4         &mmv MOVE_UP    &mkp MB5         &msc SCRL_UP     &kp F12
&trans           &kp LS(LG(LEFT))  &kp LC(PG_UP)     &kp LA(TAB)  &kp LC(PAGE_DOWN)  &mkp MB5      &mmv MOVE_LEFT   &kp PG_DN        &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN   &kp RIGHT_BRACKET
&trans           &mkp MB4          &mkp MB3          &mkp MB1     &mkp MB2           &mkp MB5      &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT      &msc SCRL_LEFT   &msc SCRL_RIGHT  &trans
&kp C_MUTE       &trans            &trans            &trans       &trans             &trans        &mkp LCLK        &trans           &trans           &trans          &trans           &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans      &trans        &trans         &trans        &trans        &trans          &mmv MOVE_UP      &trans     &trans        &trans    &trans         &trans    &trans
&trans      &kp LS(PIPE)  &kp LS(UNDER)  &kp LS(PLUS)  &kp LS(LBRC)  &kp LS(RBRC)    &mmv MOVE_DOWN    &kp PG_UP  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp BSPC  &kp BACKSPACE
&trans      &kp BSLH      &kp MINUS      &kp EQUAL     &kp LS(LPAR)  &kp LS(RPAR)    &kp C_PREVIOUS    &kp PG_DN  &kp LEFT      &kp DOWN  &kp RIGHT      &kp DEL   &kp BSPC
&trans      &trans        &kp LS(LT)     &kp LS(GT)    &kp LBKT      &kp RBKT        &kp C_NEXT        &kp INS    &kp HOME      &trans    &kp END        &trans    &trans
&kp C_MUTE  &trans        &trans         &trans        &trans        &trans          &kp C_PLAY_PAUSE  &trans     &trans        &trans    &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&out OUT_TOG     &rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &rgb_ug RGB_SPD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans           &trans           &trans           &rgb_ug RGB_TOG    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_TOG  &trans           &trans           &trans           &trans           &trans             &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adj {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
